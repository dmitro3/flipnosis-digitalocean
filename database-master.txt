# FLIPNOSIS DATABASE MASTER DOCUMENTATION
# Database Location: /opt/flipnosis/app/server/flipz.db
# Server: 159.69.242.154
# Generated: August 12, 2025
# Updated: January 2025 - Single Server Migration Complete + Event System Added
# Last Verified: January 2025 - Current Schema Audit Complete + Code Integration Complete + Missing Fields Added + Event System Implemented

================================================================================
DATABASE OVERVIEW
================================================================================

Database Name: flipz.db
Location: /opt/flipnosis/app/server/flipz.db
Server: 159.69.242.154
Total Tables: 11 (Updated from 10 - Added game_events)

Tables Found:
- admin_actions
- chat_messages
- game_events (NEW - Event-driven system)
- game_rounds
- game_shares
- games
- listings
- messages
- notifications
- offers
- profiles
- ready_nfts

REMOVED TABLES (No longer exist):
- transactions (removed)
- platform_stats (removed)
- unclaimed_rewards (removed)
- nft_metadata_cache (removed)
- player_stats (removed)
- user_presence (removed)
- nft_tracking (removed)

================================================================================
TABLE SCHEMAS (UPDATED)
================================================================================

1. ADMIN_ACTIONS TABLE
================================================================================
CREATE TABLE admin_actions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        admin_address TEXT NOT NULL,
        action_type TEXT NOT NULL,
        target_address TEXT,
        amount DECIMAL(20, 8),
        game_id INTEGER,
        chain TEXT NOT NULL,
        details TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
      );

Indexes:
- idx_admin_actions_admin ON admin_actions(admin_address)
- idx_admin_actions_type ON admin_actions(action_type)
- idx_admin_actions_chain ON admin_actions(chain)
- idx_admin_actions_created ON admin_actions(created_at)

Purpose: Tracks administrative actions and XP awards

2. GAME_EVENTS TABLE (NEW - EVENT-DRIVEN SYSTEM)
================================================================================
CREATE TABLE game_events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        game_id TEXT NOT NULL,
        event_type TEXT NOT NULL,
        event_data TEXT,  -- JSON data for the event
        target_users TEXT, -- JSON array of user addresses to notify
        processed BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

Indexes:
- idx_game_events_game_id ON game_events(game_id)
- idx_game_events_type ON game_events(event_type)
- idx_game_events_processed ON game_events(processed)
- idx_game_events_created ON game_events(created_at)

Purpose: Event-driven system for game state changes and targeted notifications

Event Types:
- offer_made: When a new offer is made
- offer_accepted: When an offer is accepted
- game_status_changed: When game status changes
- deposit_made: When a deposit is made
- game_started: When game begins
- round_completed: When a round ends
- game_ended: When game ends
- chat_message: Chat messages

3. GAMES TABLE (UPDATED - EVENT TRACKING FIELDS ADDED)
================================================================================
CREATE TABLE games (
        id TEXT PRIMARY KEY,
        creator TEXT NOT NULL,
        joiner TEXT,
        nft_contract TEXT NOT NULL,
        nft_token_id TEXT NOT NULL,
        nft_name TEXT,
        nft_image TEXT,
        nft_collection TEXT,
        nft_chain TEXT DEFAULT 'base',
        price_usd REAL NOT NULL,
        rounds INTEGER NOT NULL DEFAULT 5,
        status TEXT DEFAULT 'waiting',
        winner TEXT,
        creator_wins INTEGER DEFAULT 0,
        joiner_wins INTEGER DEFAULT 0,
        current_round INTEGER DEFAULT 1,
        listing_fee_eth REAL,
        listing_fee_hash TEXT,
        entry_fee_hash TEXT,
        listing_fee_usd REAL,
        contract_game_id TEXT,
        transaction_hash TEXT,
        blockchain_game_id TEXT UNIQUE,
        challenger_nft_name TEXT,
        challenger_nft_image TEXT,
        challenger_nft_collection TEXT,
        challenger_nft_contract TEXT,
        challenger_nft_token_id TEXT,
        game_type TEXT DEFAULT 'nft-vs-crypto',
        chain TEXT DEFAULT 'base',
        payment_token TEXT DEFAULT 'ETH',
        payment_amount DECIMAL(20, 8),
        listing_fee_paid DECIMAL(20, 8),
        platform_fee_collected DECIMAL(20, 8),
        creator_role TEXT DEFAULT 'FLIPPER',
        joiner_role TEXT DEFAULT 'CHOOSER',
        joiner_choice TEXT DEFAULT 'HEADS',
        max_rounds INTEGER DEFAULT 5,
        last_action_time TIMESTAMP,
        countdown_end_time TIMESTAMP,
        auth_info TEXT,
        unclaimed_eth DECIMAL(20, 8) DEFAULT 0,
        unclaimed_usdc DECIMAL(20, 8) DEFAULT 0,        
        unclaimed_nfts TEXT,
        total_spectators INTEGER DEFAULT 0,
        coin TEXT,
        game_data TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,  
        started_at DATETIME,
        completed_at DATETIME,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deposit_deadline TIMESTAMP,
        listing_id TEXT,
        challenger TEXT,
        coin_data TEXT,
        creator_deposited BOOLEAN DEFAULT 0,
        challenger_deposited BOOLEAN DEFAULT 0,
        nft_deposited BOOLEAN DEFAULT false,
        nft_deposit_time TIMESTAMP,
        nft_deposit_hash TEXT,
        nft_deposit_verified BOOLEAN DEFAULT false,
        last_nft_check_time TIMESTAMP,
        last_event_id INTEGER DEFAULT 0,           -- NEW FIELD
        event_version INTEGER DEFAULT 0            -- NEW FIELD
      );

Indexes:
- idx_games_chain ON games(chain)
- idx_games_game_type ON games(game_type)   
- idx_games_status_chain ON games(status, chain)
- idx_games_creator_chain ON games(creator, chain)
- idx_games_joiner_chain ON games(joiner, chain)
- idx_games_created_at_chain ON games(created_at, chain)
- idx_games_nft_deposit_status ON games(nft_deposited, created_at)
- idx_games_cleanup_candidates ON games(status, nft_deposit_verified, created_at)

Purpose: Core game data storage for NFT flipping games

NEW FIELDS ADDED:
- last_event_id: Tracks the last event ID for this game
- event_version: Tracks event version for optimistic locking

4. OFFERS TABLE
================================================================================
CREATE TABLE offers (
        id TEXT PRIMARY KEY,
        listing_id TEXT NOT NULL,
        offerer_address TEXT NOT NULL,
        offerer_name TEXT,
        offer_price REAL NOT NULL,
        message TEXT,
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
      );

Purpose: Stores offers made on NFT listings

5. CHAT_MESSAGES TABLE
================================================================================
CREATE TABLE chat_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        room_id TEXT NOT NULL,
        sender_address TEXT NOT NULL,
        message TEXT NOT NULL,
        message_type TEXT DEFAULT 'chat',
        message_data TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
      );

Indexes:
- idx_chat_messages_room_id ON chat_messages(room_id)

Purpose: Stores chat messages for game rooms

6. LISTINGS TABLE (UPDATED - FIELD TYPE CHANGE)
================================================================================
CREATE TABLE listings (
        id TEXT PRIMARY KEY,
        game_id TEXT UNIQUE,
        creator TEXT NOT NULL,
        nft_contract TEXT NOT NULL,
        nft_token_id TEXT NOT NULL,
        nft_name TEXT,
        nft_image TEXT,
        nft_collection TEXT,
        nft_chain TEXT DEFAULT 'base',
        asking_price DECIMAL(20,8) NOT NULL,
        status TEXT DEFAULT 'open',
        coin_data TEXT,
        listing_fee_paid BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        creator_online BOOLEAN DEFAULT false,
        min_offer_price DECIMAL(20,8) DEFAULT 0
      );

Purpose: NFT listings for sale

7. MESSAGES TABLE
================================================================================
CREATE TABLE messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        room_id TEXT NOT NULL,
        sender_address TEXT NOT NULL,
        message TEXT NOT NULL,
        message_type TEXT DEFAULT 'chat',
        message_data TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

Purpose: General messaging system (separate from chat_messages)

8. NOTIFICATIONS TABLE
================================================================================
CREATE TABLE notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_address TEXT NOT NULL,
        type TEXT NOT NULL,
        title TEXT NOT NULL,
        message TEXT NOT NULL,
        data TEXT,
        read BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

Purpose: User notification system

9. READY_NFTS TABLE
================================================================================
CREATE TABLE ready_nfts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        address TEXT NOT NULL,
        contract_address TEXT NOT NULL,
        token_id TEXT NOT NULL,
        name TEXT,
        image TEXT,
        collection TEXT,
        chain TEXT DEFAULT 'base',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

Purpose: Tracks NFTs that are ready for use in games

10. GAME_SHARES TABLE
================================================================================
CREATE TABLE game_shares (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        game_id TEXT NOT NULL,
        player_address TEXT NOT NULL,
        share_platform TEXT NOT NULL,
        xp_awarded BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

Purpose: Tracks when players share games on social platforms

11. GAME_ROUNDS TABLE (UPDATED - FIELD TYPE CHANGE)
================================================================================
CREATE TABLE game_rounds (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        game_id TEXT NOT NULL,
        round_number INTEGER NOT NULL,
        creator_choice TEXT,
        challenger_choice TEXT,
        flip_result TEXT,
        round_winner TEXT,
        flipper_address TEXT,
        power_used INTEGER DEFAULT 0,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

Purpose: Individual round data for each game

12. PROFILES TABLE (UPDATED - PRODUCTION)
================================================================================
CREATE TABLE profiles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        address TEXT UNIQUE NOT NULL,
        username TEXT,
        profile_picture TEXT,
        xp INTEGER DEFAULT 0,
        level INTEGER DEFAULT 1,
        total_flips INTEGER DEFAULT 0,
        wins INTEGER DEFAULT 0,
        losses INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        name TEXT DEFAULT '',
        avatar TEXT DEFAULT '',
        headsImage TEXT DEFAULT '',
        tailsImage TEXT DEFAULT '',
        twitter TEXT DEFAULT '',
        telegram TEXT DEFAULT '',
        xp_name_earned BOOLEAN DEFAULT FALSE,
        xp_avatar_earned BOOLEAN DEFAULT FALSE,
        xp_twitter_earned BOOLEAN DEFAULT FALSE,
        xp_telegram_earned BOOLEAN DEFAULT FALSE,
        xp_heads_earned BOOLEAN DEFAULT FALSE,
        xp_tails_earned BOOLEAN DEFAULT FALSE
      );

Purpose: User profile information and XP system with custom coin designs

================================================================================
EVENT-DRIVEN SYSTEM OVERVIEW
================================================================================

The new event-driven system provides targeted notifications and better scalability:

Key Features:
1. **Targeted Notifications**: Only relevant users receive specific events
2. **Event Persistence**: All events are stored in the database for debugging and replay
3. **Scalable Architecture**: Events can be processed asynchronously
4. **Better Debugging**: Clear event types and data for troubleshooting

Event Flow:
1. Game action occurs (offer made, accepted, etc.)
2. Event is emitted and stored in game_events table
3. WebSocket handlers listen for events and send targeted messages
4. Clients receive only relevant notifications

Benefits:
- Reduced WebSocket traffic (only targeted users)
- Better error handling and debugging
- Event replay capability
- Scalable for many concurrent users

================================================================================
CURRENT DATA STATUS (January 2025)
================================================================================

Database Records Summary:
- games: 42 records (active games and cancelled games)
- listings: 77 records (NFT listings)
- admin_actions: 3 records (XP awards and admin actions)
- profiles: 3 records (user profiles)
- game_events: 0 records (new table, will populate as events occur)
- other tables: Various counts

Key Observations:
1. Games table has grown significantly (42 records vs 5 in previous audit)
2. Listings table is very active (77 records)
3. NFT deposit tracking fields have been added to games table
4. Event-driven system has been implemented
5. New indexes added for performance optimization

================================================================================
SCHEMA CHANGES SUMMARY
================================================================================

ADDED TABLES:
- game_events: Event-driven system for targeted notifications

ADDED FIELDS:
- games.last_event_id (INTEGER)
- games.event_version (INTEGER)

ADDED INDEXES:
- idx_game_events_game_id
- idx_game_events_type
- idx_game_events_processed
- idx_game_events_created

FIELD TYPE CHANGES:
- listings.asking_price: REAL → DECIMAL(20,8)
- game_rounds.flipper_address: NOT NULL → NULLABLE
- game_rounds.power_used: REAL → INTEGER
- game_rounds.timestamp: DATETIME → TIMESTAMP

REMOVED TABLES:
- transactions
- platform_stats
- unclaimed_rewards
- nft_metadata_cache
- player_stats
- user_presence
- nft_tracking

================================================================================
APPLICATION INTEGRATION
================================================================================

Frontend Components:
- Profile.jsx: Main profile page with all fields
- ProfileContext.jsx: React context for profile management
- UserProfileHeader.jsx: Profile display component
- GameLobby.jsx: Updated to handle event-driven messages
- OffersContainer.jsx: Updated to handle targeted notifications

Backend Integration:
- API routes in server/routes/api.js: Updated to use event system
- EventService.js: New event-driven service
- WebSocketEventHandler.js: New targeted message handler
- XP service integration for achievement system
- Database service for profile CRUD operations
- NFT deposit tracking system

================================================================================
CURRENT STATUS
================================================================================

✅ Database schema updated and synchronized
✅ All profile fields present and functional
✅ XP system integrated
✅ Custom coin design system ready
✅ Social media integration complete
✅ Legacy compatibility maintained
✅ NFT deposit tracking system implemented
✅ New indexes for performance optimization
✅ **EVENT-DRIVEN SYSTEM IMPLEMENTED**: Targeted notifications and better scalability
✅ **CODE INTEGRATION COMPLETE**: All NFT deposit tracking fields are now populated by CreateFlip page
✅ **API ENDPOINTS UPDATED**: Database operations now include NFT deposit tracking and event system
✅ **MISSING FIELDS ADDED**: creator_online and min_offer_price fields added to listings table
✅ **ALL COMPONENTS VERIFIED**: Dashboard, AdminPanel, DatabaseAdmin, ProfileWithNotifications, MyFlipsDropdown, OfferModal, NFTOfferComponent, ChatContainer, and ShareButton all have required database fields

The database is now fully synchronized with the application requirements and includes the latest NFT deposit tracking features and event-driven system. The CreateFlip page and API endpoints are fully integrated with both systems.

================================================================================
MIGRATION NOTES
================================================================================

Single Server Migration (January 2025):
- Moved from dual-server setup (116.202.24.43 + 159.69.242.154)
- Now using single server: 159.69.242.154
- Database consolidated to /opt/flipnosis/app/server/flipz.db
- All profile fields added to match application requirements

Event System Migration (January 2025):
- Added game_events table for event-driven architecture
- Added event tracking fields to games table
- Implemented targeted notification system
- Updated API endpoints to use event system
- Updated frontend components to handle new events

Schema Updates Applied:
- Added missing profile fields (name, avatar, headsImage, tailsImage, etc.)
- Added XP tracking boolean flags
- Preserved legacy fields for backward compatibility
- Copied data from legacy fields to new fields where applicable
- Added NFT deposit tracking system
- Added event-driven system
- Optimized indexes for performance

Recent Updates (January 2025):
- Added NFT deposit tracking fields to games table
- Added performance indexes for NFT deposit status
- Added event-driven system for targeted notifications
- Removed unused tables to streamline database
- Updated field types for better precision and performance
- **CODE INTEGRATION COMPLETE**: CreateFlip.jsx and API endpoints now populate all NFT deposit tracking fields
- **API ENDPOINTS UPDATED**: /games/:gameId/create-from-listing and /games/:gameId/deposit-confirmed now handle NFT deposit tracking
- **EVENT SYSTEM IMPLEMENTED**: /offers/:offerId/accept now uses event-driven system for targeted notifications
- **MISSING FIELDS ADDED**: Added creator_online and min_offer_price fields to listings table for Dashboard and OfferModal components

================================================================================
DEPLOYMENT INSTRUCTIONS
================================================================================

To deploy the event-driven system:

1. **Database Migration**:
   ```bash
   # Connect to production database
   ssh root@159.69.242.154
   cd /opt/flipnosis/app/server
   sqlite3 flipz.db < /path/to/migrate-to-event-system.sql
   ```

2. **Server Deployment**:
   ```bash
   # Deploy updated server code
   ./deployment/deploy-hetzner-git-fixed.ps1 "Event system implementation"
   ```

3. **Verification**:
   - Check that game_events table exists
   - Verify event tracking fields in games table
   - Test offer acceptance flow
   - Monitor event emission in server logs

The event-driven system is now ready for production use.
